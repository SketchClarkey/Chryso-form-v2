name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18.20.0'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      node-version: ${{ steps.versions.outputs.node-version }}
    steps:
      - uses: actions/checkout@v4
      - id: versions
        run: |
          echo "node-version=$(cat .nvmrc)" >> $GITHUB_OUTPUT

  lint-and-format:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check Prettier formatting
        run: npx prettier --check .

      - name: TypeScript type checking
        run: |
          npm run build:server
          npm run build:client

  unit-tests:
    runs-on: ubuntu-latest
    needs: setup

    strategy:
      matrix:
        node-version: ['18.20.0', '20.11.0']

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run server tests with coverage
        run: npm run test:coverage -w apps/server
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/chryso-forms-test
          JWT_SECRET: test-jwt-secret-key-for-ci-32-chars-long
          JWT_REFRESH_SECRET: test-jwt-refresh-secret-key-for-ci-32-chars-long

      - name: Run client tests with coverage
        run: npm run test:coverage -w apps/client

      - name: Upload server coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./apps/server/coverage/lcov.info
          flags: server
          name: server-coverage

      - name: Upload client coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./apps/client/coverage/lcov.info
          flags: client
          name: client-coverage

  e2e-tests:
    runs-on: ubuntu-latest
    needs: [setup, lint-and-format]

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongosh
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps chromium firefox webkit

      - name: Build applications
        run: npm run build

      - name: Start server for E2E tests
        run: npm run start &
        env:
          NODE_ENV: test
          PORT: 5000
          MONGODB_URI: mongodb://localhost:27017/chryso-forms-e2e
          JWT_SECRET: test-jwt-secret-key-for-ci-32-chars-long
          JWT_REFRESH_SECRET: test-jwt-refresh-secret-key-for-ci-32-chars-long

      - name: Wait for server to be ready
        run: npx wait-on http://localhost:5000/api/health --timeout 60000

      - name: Run Playwright tests
        run: npm run test:e2e
        env:
          BASE_URL: http://localhost:3000
          API_URL: http://localhost:5000

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ matrix.os || 'ubuntu' }}
          path: playwright-report/
          retention-days: 30

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ matrix.os || 'ubuntu' }}
          path: test-results/
          retention-days: 30

  build-and-test-docker:
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: chryso-form-v2:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm --name test-container -d -p 5000:5000 chryso-form-v2:test
          sleep 10
          curl -f http://localhost:5000/api/health || exit 1
          docker stop test-container

  security-scan:
    runs-on: ubuntu-latest
    needs: setup
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=medium

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, build-and-test-docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/develop'
    environment: staging

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to staging
        run: |
          echo "Deploying to staging environment..."
          # Add your staging deployment logic here

  deploy-production:
    runs-on: ubuntu-latest
    needs: [unit-tests, e2e-tests, build-and-test-docker, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production

    steps:
      - uses: actions/checkout@v4

      - name: Deploy to production
        run: |
          echo "Deploying to production environment..."
          # Add your production deployment logic here
